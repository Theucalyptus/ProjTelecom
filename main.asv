Rb=3000; % débit binaire
Fp = 3e3; % fréquence porteuse
Fe = 24e3; % fréquence d'échantillonnage

NBBITS=2000;
Bits=randi([0 1], NBBITS, 1);

EbN0_db=0:1:8; % rapport signal à bruit en Db
EbN0=10.^(EbN0_db/10); % en rapport


%% CONSTANTES
ROLL_OFF=0.35;
L=10;
M=4; % ordre de la modulation

% Initialisation des constantes du programme
Te = 1 / Fe; % Temps d'échantillonage
Tb=1/Rb; % Temps binaire
Ts=Tb/log2(M); % Temps symbole
Ns=round(Ts/Te); % Facteur de sur-échantillonage

%% MAPPING
% mapping de gray
% 0 0 -> I=-1, Q=-1
% 0 1 -> I=-1, Q=1
% 1 1 -> I=1, Q=1
% 1 0 -> I=1, Q=-1
Ak = 2*Bits(1:2:end) - 1;
Bk = 2*Bits(2:2:end) - 1;
Dk = Ak + 1i*Bk;
mapping = Dk;

%% MODULATEUR BANDE DE BASE
B = rcosdesign(ROLL_OFF, L, Ns, 'sqrt');
u = zeros(1, Ns);
u(1) = 1;
k = kron(Dk', u);
length(k)
h_bdb=filter(B, 1, k); % signal bande de base
h_bdb=h_bdb(L/2:end); % suppression des valeurs nulles à cause du retard du filtre
size(h_bdb)
h_bdb=[h_bdb, zeros(1, L/2)]; % ajout de zero à la fin


figure 
hold on
plot(real(h_bdb))
plot(imag(h_bdb))
xlabel("Temps (s)")
ylabel("Signal")
legend("En phase", "En quadr")
title("Signal transmis sur porteuse")


%% PASSAGE SUR PORTEUSE
temps = linspace(0, (length(Dk)-1)*Ts, length(h_bdb));  
h_p=h_bdb.*exp(2i*pi*Fp*temps); % signal transporté sur porteuse
h_p=real(h_p);

%% Tracé signal sur porteuse temporel
figure 
plot(h_p)
xlabel("Temps (s)")
ylabel("Signal")
title("Signal transmis sur porteuse")

%% Tracé des DSP
figure
dsp = pwelch(h_bdb, [],[],[],FE,'twosided');
ech_freq=linspace(-FE/2, FE/2, length(dsp));
semilogy(ech_freq, fftshift(dsp));
hold on
dsp = pwelch(h, [],[],[],FE,'twosided');
ech_freq=linspace(-FE/2, FE/2, length(dsp));
semilogy(ech_freq, fftshift(dsp));
legend('Bande de base', 'Transportée sur porteuse');
title('DSP')

TEB = zeros(length(EnN0), 1); % vecteur des TEB
for ebn0=EbN0
    h_bruite = bruit(h, Ns, M, EbN0(4));
   

    %% Démodulation
    temps = linspace(0, Te, length(H));
    I = H_b.*2*cos(2*pi*Fp*temps);
    Q = H_b.*2*cos(2*pi*Fp*temps);

    L=10;
    ROLL_OFF=0.35;
    B = rcosdesign(ROLL_OFF, L, Ns);
    I_filtre = filter(B, 1, I);
    Q_filtre = filter(B, 1, Q);
    Hr = I_filtre + 1i*Q_filtre;
    Hr = Hr(L/2:end);

    %% Décision symboles
    seuilR = 0; % seuil sur la partie réelle
    seuilI = 0; % seuil sur la partie imaginaire
    NbSym = length(H_b) / Ns;
    N0 = Ns; % instant d'échantillonage
    Hr_ech = Hr(N0 + [0:NbSym-1]*Ns);
    DecAk = real(Hr_ech) > seuilR;
    DecBk = imag(Hr_ech) > seuilI;


    %% Dé-mapping
    %BitsDecode = ;


end


